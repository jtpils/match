#include <iostream>
#include <ros/ros.h>
#include <pcl/point_types.h>
#include <pcl/common/transforms.h>
#include <pcl/registration/ndt.h>
#include <pcl/sample_consensus/sac_model_line.h>
#include <pcl/sample_consensus/ransac.h>
#include <pcl/common/pca.h>
#include <pcl/io/pcd_io.h>
#include <pcl/filters/extract_indices.h>

pcl::PointCloud<pcl::PointXYZI> map1;

int main()
{
    for(int i = 0; i < 50; i ++)
    {
        std::stringstream ss;
        ss.str("");
        ss << i;
        ss << ".pcd";
        std::string fileName;
        fileName = ss.str();

        pcl::PointCloud<pcl::PointXYZI> laser;
        pcl::io::loadPCDFile(fileName, laser);
        std::cout << "laser.points.size() = " << laser.points.size() << std::endl;

        pcl::PointIndices::Ptr index(new pcl::PointIndices);
        pcl::ExtractIndices<pcl::PointXYZI> left;
        left.setNegative(true);

        pcl::PointCloud<pcl::PointXYZI> yang;

        while(1)
        {
            pcl::SampleConsensusModelLine<pcl::PointXYZI>::Ptr model_l(new pcl::SampleConsensusModelLine<pcl::PointXYZI>(laser.makeShared()));
            pcl::RandomSampleConsensus<pcl::PointXYZI> ransac(model_l);
            ransac.setDistanceThreshold(0.03);
            ransac.computeModel();
            pcl::PointCloud<pcl::PointXYZI>::Ptr line_ptr(new pcl::PointCloud<pcl::PointXYZI>());
            index->indices.clear();
            ransac.getInliers(index->indices);
            if(index->indices.size() < 4)
            {
                break;
            }
            pcl::copyPointCloud(laser, index->indices, *line_ptr);

            //均值和范围
            pcl::PCA<pcl::PointXYZI> pca;
            pca.setInputCloud(line_ptr);
            Eigen::Vector3f n = pca.getEigenVectors().col(0);
            Eigen::Vector4f mean = pca.getMean();
            for(int j = 0; j < 10; j ++)
            {
                pcl::PointXYZI point1, point2;
                point1.x = mean(0) + 0.1 * n(0) * j; 
                point1.y = mean(1) + 0.1 * n(1) * j;
                point1.z = mean(2) + 0.1 * n(2) * j;
                point2.x = mean(0) - 0.1 * n(0) * j;
                point2.y = mean(1) - 0.1 * n(1) * j;
                point2.z = mean(2) - 0.1 * n(2) * j;
                yang.push_back(point1);
                yang.push_back(point2);
            }

            //left
            left.setInputCloud(laser.makeShared());
            left.setIndices(index);
            left.filter(laser);
        }   

        std::cout << "yang.points.size() = " << yang.points.size() << std::endl;

        if(i == 0)
        {
            map1 += yang;
            std::cout << 0 << '\t' << 0 << '\t' << 0 << std::endl;
        }
        else
        {
            pcl::NormalDistributionsTransform<pcl::PointXYZI, pcl::PointXYZI> ndt;
            ndt.setInputTarget(map1.makeShared());
            ndt.setTransformationEpsilon(0.0001);
            ndt.setStepSize(0.5);
            ndt.setResolution(1.0);
            ndt.setMaximumIterations(100);
            ndt.setInputSource(yang.makeShared());
            static Eigen::Matrix4f guess = Eigen::Matrix4f::Identity();
            ndt.align(yang, guess);
            map1 += yang;
            std::cout << guess(0,3) << '\t' << guess(1,3) << '\t' << guess(2,3) << std::endl;
        }

    }
    return 0;
}

